deploy
server prefill

done:
    sort by duration
    pointer cursors
    improve user flow (no save until modified, fast back to playlist list)
    add 'open playlist in spotify' button
    more save testing
    fix nans (weezer at redbull)
    improved info and error messages
    server stats
    figure out datatables cdn or local
    add faq

No:
    Add col for date added for songs

later:
    manually delete row
    dup detection


# Nick's TODO

Questions
- How far do you want to go with this tool?
- What items are out of scope?
- Are you interested in trying flask/angular, refactoring to use promises etc?


Playlists View:
- defect? - playlists are part of the jumbo div, is this correct?
- show owner details (local cache of owner details, with expiry)
- filter owned/followed lists
- loading progress (how much is remaining?)
- sorting by name, last modified, owner, etc
- select multiple playlists to filter
- folder view (requires api)

Tracks View:
- defect: can't save if local files in list.
- defect?: is order of loaded playlist retained when loading slowly from server?
- BPM doubler for filter (80bpm can count for 160)
- disable sorting until fully loaded.
- filter BPM with base tempo +- chosen range (eg, I want 160bpm within 3%)
- show loading progress, ie how much is remaining.
- save/add to/replace playlist (like button in spotify)
- map bpm to custom graph over time (eg, a playlist that slowly ramps up then down again quickly)

Client Architectural:
- move js out of index.html into app.js
- only make one request at a time to cut down load on api server.
- upgrade other libraries. 
- use CDN for everything or migrate CDN libraries to local.
- local storage for caching of track and owner info.
- show loaded tracks immediately (without song info), then fill in details as loaded.
- use promises instead of callbacks (what about progress reporting)
- migrate to ember or angular or react?
- use templating?

Server Architectural:
- defect?: does warm.py affect the cache?
- is sharing the cache object thread safe?
- sqlite/other db support using sqlalchemy (better concurrency)
- save cache periodically 
- use flask intead of cherrpy? (bigger community, how does it affect )

Deployment:
- Documentation for submitting code
   -- include tests, jshint, w3c validation.. anything else?


Done:
- defect sorting large playlists
- tidy up and document 
- bpm filtering
- show followed playlists
